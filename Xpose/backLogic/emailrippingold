#!/bin/bash

export PATH="$HOME/.local/bin:$PATH"

echo -e "\033[1;34m
  ██╗  ██╗ ██████╗ ███████╗███████╗ █████╗ ███╗   ██╗
  ██║ ██╔╝██╔═══██╗██╔════╝██╔════╝██╔══██╗████╗  ██║
  █████╔╝ ██║   ██║█████╗  █████╗  ███████║██╔██╗ ██║
  ██╔═██╗ ██║   ██║██╔══╝  ██╔══╝  ██╔══██║██║╚██╗██║
  ██║  ██╗╚██████╔╝██║     ██║     ██║  ██║██║ ╚████║
  ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝
  EmailRipper v2.0 | By Koffan
\033[0m"

# Check inputs
if [ -z "$1" ]; then
    echo -e "\033[1;31mUsage: ./emailripping <email> [domain]\033[0m"
    echo -e "\033[1;33mExample: ./emailripping test@gmail.com google.com\033[0m"
    exit 1
fi

# Create reports directory if it doesn't exist
mkdir -p "./reports"

# Generate report ID (first 3 chars of email + sequential 3-digit number)
email_prefix=$(echo "$1" | cut -d'@' -f1 | head -c 3 | tr '[:upper:]' '[:lower:]')
counter_file="./reports/.counter"

# Initialize or read counter
if [ ! -f "$counter_file" ]; then
    echo "0" > "$counter_file"
fi
counter=$(cat "$counter_file")
counter=$((counter + 1))
[ $counter -gt 999 ] && counter=1  # Reset if exceeds 999
printf -v padded_counter "%03d" "$counter"
echo "$counter" > "$counter_file"

report_id="${email_prefix}${padded_counter}"

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Input handling
email="$1"
domain="${2:-$(echo "$email" | cut -d'@' -f2)}"

# Generate compact report
{
  # Colorful Header
  echo -e "${PURPLE}=== START EMAIL REPORT ===${NC}"
  echo -e "${BLUE}email:${NC}$email"
  echo -e "${BLUE}domain:${NC}$domain"
  echo -e "${BLUE}report_id:${NC}$report_id"
  
  # Account registrations
  echo -e "${PURPLE}=== ACCOUNT REGISTRATIONS ===${NC}"
  holehe "$email" --only-used 2>/dev/null | awk '
    /[+]/ {print "'${GREEN}'registered: '${NC}'" $1}
    /[-]/ {print "'${RED}'not_registered: '${NC}'" $1}'
  
  # Breach data
  echo -e "${PURPLE}=== BREACHES ===${NC}"
  h8mail -t "$email" 2>/dev/null | awk '
    /\[\+\]/ {print "'${RED}'breach: '${NC}'" $3}
    /\[!\]/ {print "'${GREEN}'clean: true'${NC}'"}'
  
  # Domain info
  echo -e "${PURPLE}=== DOMAIN DATA ===${NC}"
  theHarvester -d "$domain" -b dnsdumpster -l 100 2>/dev/null | awk '
    /^[a-zA-Z0-9]/ {print "'${CYAN}'subdomain: '${NC}'" $0}
    /@/ && !/theHarvester/ {print "'${CYAN}'domain_email: '${NC}'" $0}'
} > "/tmp/${report_id}.tmp"

# Calculate risk score
platforms=$(grep -c "registered:" "/tmp/${report_id}.tmp")
breaches=$(grep -c "breach:" "/tmp/${report_id}.tmp")
subdomains=$(grep -c "subdomain:" "/tmp/${report_id}.tmp")
emailscore=$((breaches*10 + platforms*3 + subdomains*1))

# Generate final report with risk assessment
report_path="./reports/${report_id}.txt"
{
  cat "/tmp/${report_id}.tmp"
  echo -e "${PURPLE}=== RISK ASSESSMENT ===${NC}"
  echo -e "${YELLOW}breach_count:${NC}$breaches"
  echo -e "${YELLOW}platform_count:${NC}$platforms"
  echo -e "${YELLOW}subdomain_count:${NC}$subdomains"
  echo -e "${YELLOW}risk_score:${NC}$emailscore"
  
  # Color-coded recommendations based on score
  if [ $emailscore -gt 50 ]; then
    echo -e "${RED}risk_level: critical${NC}"
    echo -e "${RED}recommendations: Change all passwords immediately, enable 2FA everywhere, monitor financial accounts${NC}"
  elif [ $emailscore -gt 25 ]; then
    echo -e "${YELLOW}risk_level: high${NC}" 
    echo -e "${YELLOW}recommendations: Change reused passwords, review social media settings, check breach details${NC}"
  else
    echo -e "${GREEN}risk_level: low${NC}"
    echo -e "${GREEN}recommendations: Regular security maintenance recommended${NC}"
  fi
  echo -e "${PURPLE}=== END REPORT ===${NC}"
} > "$report_path"

# Cleanup
rm "/tmp/${report_id}.tmp" 2>/dev/null

# Export variables for use in other scripts
export EMAIL_RIPPING_REPORT_ID="$report_id"
export EMAIL_RIPPING_REPORT_PATH="$report_path"
export EMAIL_RIPPING_SCORE="$emailscore"
export EMAIL_RIPPING_EMAIL="$email"
export EMAIL_RIPPING_DOMAIN="$domain"

# Create a sourceable file with all variables
variables_file="./reports/${report_id}.vars"
{
  echo "export EMAIL_RIPPING_REPORT_ID=\"$report_id\""
  echo "export EMAIL_RIPPING_REPORT_PATH=\"$report_path\""
  echo "export EMAIL_RIPPING_SCORE=\"$emailscore\""
  echo "export EMAIL_RIPPING_EMAIL=\"$email\""
  echo "export EMAIL_RIPPING_DOMAIN=\"$domain\""
  echo "export EMAIL_RIPPING_RECOMMENDATIONS=\"$(grep "^recommendations:" "$report_path" | cut -d':' -f2-)\""
} > "$variables_file"

echo -e "${GREEN}Report generated with ID: ${CYAN}$report_id${NC}"
echo -e "${BLUE}Report saved to: ${CYAN}$report_path${NC}"
echo -e "${YELLOW}Variables saved to: ${CYAN}$variables_file${NC}"
echo -e "\n${PURPLE}To use these variables in another script:${NC}"
echo -e "source \"$variables_file\""
